# Production Dockerfile for CAE (Conversational Analysis Engine)
# This is optimized for production with security hardening and minimal size

# Stage 1: Builder
FROM python:3.12-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Copy requirements first for better caching
COPY requirements.txt .

# Stage 2: Runtime
FROM python:3.12-slim

# Install runtime dependencies and security updates
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    gcc \
    g++ \
    libpq-dev \
    python3-dev \
    && apt-get upgrade -y \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user with specific UID/GID for consistency
RUN groupadd -r -g 1000 cae && \
    useradd -r -u 1000 -g cae -m -s /bin/bash cae

# Set working directory
WORKDIR /app

# Copy application code with proper ownership
COPY --chown=cae:cae requirements.txt .
COPY --chown=cae:cae app/ ./app/
COPY --chown=cae:cae migrations/ ./migrations/

# Install dependencies
RUN pip install --upgrade pip && \
    pip install --no-cache-dir --no-deps -r requirements.txt && \
    # Clean up build dependencies
    apt-get purge -y gcc g++ python3-dev && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /root/.cache/pip

# Security: Remove unnecessary packages and files
RUN apt-get purge -y --auto-remove curl && \
    rm -rf /var/lib/apt/lists/* && \
    # Remove any setuid/setgid files
    find / -perm /6000 -type f -exec chmod a-s {} \; 2>/dev/null || true

# Create logs directory with proper permissions
RUN mkdir -p /app/logs && chown -R cae:cae /app/logs

# Switch to non-root user
USER cae

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONPATH=/app
ENV PATH="/home/cae/.local/bin:${PATH}"

# Expose port
EXPOSE 8000

# Health check with tighter timing for production
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')" || exit 1

# Run with production settings (no reload, higher worker count)
CMD ["uvicorn", "app.main:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "4", \
     "--loop", "uvloop", \
     "--log-level", "warning", \
     "--access-log"] 